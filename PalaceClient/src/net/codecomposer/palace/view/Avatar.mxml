<?xml version="1.0" encoding="utf-8"?>

<!--
This file is part of OpenPalace.

OpenPalace is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OpenPalace is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with OpenPalace.  If not, see <http://www.gnu.org/licenses/>.
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	x="{user.x-this.width/2}" y="{user.y-this.height/2}"
	height="132"
	buttonMode="true"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	creationComplete="handleCreationComplete()"
	xmlns:filters="flash.filters.*">
	
	<mx:Script>
		<![CDATA[
			import mx.events.CollectionEvent;
			import net.codecomposer.palace.model.PalaceProp;
			import mx.binding.utils.ChangeWatcher;
			import mx.events.PropertyChangeEvent;
			import com.deviant.HueColorMatrixFilter;
			import mx.collections.ArrayCollection;
			import net.codecomposer.palace.model.PalaceUser;
			[Bindable]
			public var user:PalaceUser = new PalaceUser();
			
			// Faces
			[Embed(source="../../../../assets/faces/0.gif")]
			[Bindable]
			public static var face0:Class;
			
			[Embed(source="../../../../assets/faces/1.gif")]
			[Bindable]
			public static var face1:Class;
			
			[Embed(source="../../../../assets/faces/2.gif")]
			[Bindable]
			public static var face2:Class;
			
			[Embed(source="../../../../assets/faces/3.gif")]
			[Bindable]
			public static var face3:Class;
			
			[Embed(source="../../../../assets/faces/4.gif")]
			[Bindable]
			public static var face4:Class;
			
			[Embed(source="../../../../assets/faces/5.gif")]
			[Bindable]
			public static var face5:Class;
			
			[Embed(source="../../../../assets/faces/6.gif")]
			[Bindable]
			public static var face6:Class;
			
			[Embed(source="../../../../assets/faces/7.gif")]
			[Bindable]
			public static var face7:Class;
			
			[Embed(source="../../../../assets/faces/8.gif")]
			[Bindable]
			public static var face8:Class;
			
			[Embed(source="../../../../assets/faces/9.gif")]
			[Bindable]
			public static var face9:Class;
			
			[Embed(source="../../../../assets/faces/10.gif")]
			[Bindable]
			public static var face10:Class;
			
			[Embed(source="../../../../assets/faces/11.gif")]
			[Bindable]
			public static var face11:Class;
			
			[Embed(source="../../../../assets/faces/12.gif")]
			[Bindable]
			public static var face12:Class;
			
			[Bindable]
			private var faces:ArrayCollection = new ArrayCollection([
				face0,
				face1,
				face2,
				face3,
				face4,
				face5,
				face6,
				face7,
				face8,
				face9,
				face10,
				face11,
				face12
			]);

			private var colors:Object = {};
			
			private var brightnessAdjust:Object = {
				3: 30,
				4: 50
			};
			
			private var hue:HueColorMatrixFilter = new HueColorMatrixFilter();				
						
			private function updateFace(event:PropertyChangeEvent=null):void {
				if (user) {
					hue.reset();
					hue.Hue = colors[user.color];
					face.filters = [hue.Filter];
				}
			}
			
			private function handleCreationComplete():void {
				var startColor:int = -35;
				var interval:int = 360/16;
				for (var i:int = 0; i < 16; i++) {
					colors[i] = startColor + (interval * i);
				}
				
				updateFace();
				ChangeWatcher.watch(this, ['user','face'], updateFace);
				ChangeWatcher.watch(this, ['user','color'], updateFace);
			}
			
		]]>
	</mx:Script>
	<mx:Image x="44" y="44" width="44" height="44" source="{faces.getItemAt(user.face)}" visible="{user.showFace}" id="face"/>
	<!--
	<mx:Canvas backgroundColor="#000000" width="{nameTag.width}" height="{nameTag.height-2}" x="{nameTag.x}" y="{nameTag.y}" />
	-->
	<mx:Canvas id="propsCanvas" horizontalCenter="0" verticalCenter="0" width="132" height="132"
		verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<mx:Repeater id="propRepeater" dataProvider="{user.props}">
			<mx:Image source="{propRepeater.currentItem.bitmap}"
				alpha="{propRepeater.currentItem.ghost ? 0.5 : 1.0}"
				x="{propRepeater.currentItem.horizontalOffset+43}"
				y="{propRepeater.currentItem.verticalOffset+43}" />
		</mx:Repeater>
	</mx:Canvas>
	
	<mx:Label color="#FFFFFF" id="nameTag" fontWeight="bold" selectable="false" 
		text="{user.name}" textAlign="center" horizontalCenter="0" verticalCenter="24"
		fontFamily="Arial" fontSize="12">
		<mx:filters>
			<filters:GlowFilter color="#000000" alpha="1" blurX="2" blurY="2" quality="{BitmapFilterQuality.MEDIUM}" strength="5" />
		</mx:filters>
	</mx:Label>
</mx:Canvas>
