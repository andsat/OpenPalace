<?xml version="1.0" encoding="utf-8"?>

<!--
This file is part of OpenPalace.

OpenPalace is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

OpenPalace is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with OpenPalace.  If not, see <http://www.gnu.org/licenses/>.
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
	creationComplete="handleCreationComplete()" xmlns:view="net.codecomposer.palace.view.*">
	<mx:Script>
		<![CDATA[
			import net.codecomposer.palace.model.PalaceImageOverlay;
			import net.codecomposer.palace.model.PalaceHotspotState;
			import net.codecomposer.palace.model.PalaceCurrentRoom;
			import mx.binding.utils.ChangeWatcher;
			import mx.events.CollectionEvent;
			import mx.events.CollectionEventKind;
			import mx.collections.ArrayCollection;
			import net.codecomposer.palace.model.PalaceHotspot;
			
			[Bindable]
			public var hotSpots:ArrayCollection;
			[Bindable]
			public var room:PalaceCurrentRoom;
			[Bindable]
			public var mediaServer:String;
			
			private var viewsByHotSpot:Dictionary = new Dictionary();
			
			
			private function handleCreationComplete():void {
				hotSpots.addEventListener(CollectionEvent.COLLECTION_CHANGE, handleHotSpotsChange);
			}
			
			private function handleHotSpotsChange(event:CollectionEvent):void {
				if (event.kind == CollectionEventKind.ADD) {
					for each (var hotSpot:Object in event.items) {
						addHotSpot(PalaceHotspot(hotSpot));
					}
				}
				else if (event.kind == CollectionEventKind.REMOVE) {
					trace("Removing hotspot: " + event.items[0]);
				}
				else if (event.kind == CollectionEventKind.RESET) {
					trace("Resetting hotspots");
					resetHotSpots();
				}
				else {
					trace("HotSpot CollectionEventKind: " + event.kind);
				}
			}
			
			private function addHotSpot(hotSpot:PalaceHotspot):void {
				trace("DRAWING HOTSPOT");
				
				var hotSpotSprite:HotSpotSprite = new HotSpotSprite(hotSpot);
				
				hotspotCanvas.rawChildren.addChild(hotSpotSprite);
				viewsByHotSpot[hotSpot] = hotSpotSprite;
				
				if (hotSpot.state < hotSpot.states.length) { // Sanity check
					var state:PalaceHotspotState = PalaceHotspotState(hotSpot.states.getItemAt(hotSpot.state));
					var pictureId:int = state.pictureId;
					var imageOverlay:PalaceImageOverlay = PalaceImageOverlay(room.images[pictureId]);
					
					if (imageOverlay && imageOverlay.filename != null) {
						var hotSpotImage:HotSpotImage = new HotSpotImage();
						hotSpotImage.state = state;
						hotSpotImage.hotspot = hotSpot;
						hotSpotImage.transparencyColor = imageOverlay.transparencyColor;
						hotSpotImage.transparencyIndex = imageOverlay.transparencyIndex;
						hotSpotImage.filename = imageOverlay.filename;
						hotSpotImage.mediaServer = mediaServer;
						imageCanvas.addChild(hotSpotImage);
					}
				}
			}
			
			private function resetHotSpots():void {
				viewsByHotSpot = new Dictionary();
				while (hotspotCanvas.rawChildren.numChildren > 0) {
					hotspotCanvas.rawChildren.removeChildAt(0);
				}
				while (imageCanvas.numChildren > 0) {
					imageCanvas.removeChildAt(0);
				}
			}
			
		]]>
	</mx:Script>

	<mx:Canvas id="imageCanvas" top="0" left="0" bottom="0" right="0" 
		verticalScrollPolicy="off" horizontalScrollPolicy="off"/>
	<mx:Canvas id="hotspotCanvas" top="0" left="0" bottom="0" right="0" 
		verticalScrollPolicy="off" horizontalScrollPolicy="off"/>
	
</mx:Canvas>
